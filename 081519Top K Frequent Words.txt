471. Top K Frequent Words
??English
Given a list of words and an integer k, return the top k frequent words in the list.

Example
Example 1:

Input:
  [
    "yes", "lint", "code",
    "yes", "code", "baby",
    "you", "baby", "chrome",
    "safari", "lint", "code",
    "body", "lint", "code"
  ]
  k = 3
Output: ["code", "lint", "baby"]
Example 2:

Input:
  [
    "yes", "lint", "code",
    "yes", "code", "baby",
    "you", "baby", "chrome",
    "safari", "lint", "code",
    "body", "lint", "code"
  ]
  k = 4
Output: ["code", "lint", "baby", "yes"]
Challenge
Do it in O(nlogk) time and O(n) extra space.

Notice
You should order the words by the frequency of them in the return list, the most frequent one comes first. If two words has the same frequency, the one with lower alphabetical order come first.

//Daniel
public class Solution {
    /**
     * @param words: an array of string
     * @param k: An integer
     * @return: an array of string
     */
    public String[] topKFrequentWords(String[] words, int k) {
        // write your code here
	HashMap<String, Integer> map = new HashMap<>();
        for(int i = 0; i < words.length; i++){
            if(map.containsKey(words[i])){
                map.put(words[i], map.get(words[i])+1);
            }else{
                 map.put(words[i], map.getOrDefault(words[i], 0));
            }    
        }
        TreeMap<Integer, List<String>> freqMap = new TreeMap<>();
        for(String num : map.keySet()){
            int freq = map.get(num);
            if(!freqMap.containsKey(freq)){
                freqMap.put(freq, new LinkedList<>());
            }
            freqMap.get(freq).add(num);
        }
        
        List<String> res = new ArrayList<>();
        while (res.size() < k) {
            if(freqMap.size()==0){
                 break;
             }
             int count = freqMap.lastKey();
             List<String> list = freqMap.get(count);
             freqMap.remove(count);
             Collections.sort(list);
             res.addAll(list);
        }
        while(res.size()>k){
             res.remove(res.size()-1);
         }
        return res;
    }
}


//Joel

class Pair {
   String key;
   int value;
   Pair(String key, int value) {
      this.key = key;
	  this.value = value;
   }
}
public class Solution {
    /**
     * @param words: an array of string
     * @param k: An integer
     * @return: an array of string
     */
	private Comparator<Pair> pairComparator = new Comparator<Pair>() {
        public int compare(Pair left, Pair right) {
            if (left.value != right.value) {
                return left.value - right.value;
            }
            return right.key.compareTo(left.key);
        }
    };
	
    public String[] topKFrequentWords(String[] words, int k) {
	    if (k == 0) {
		   return new String[0];
		}
        Map<String, Integer> map = new HashMap<>();
		for (int i = 0; i < words.length; i++) {
		   map.put(words[i], map.getOrDefault(words[i], 0) + 1);
		}
		
		PriorityQueue<Pair> priorityQueue = new PriorityQueue<>(k, pairComparator);
		
	    for (String word : map.keySet()) {
		   Pair pair = new Pair(word, map.get(word));
		   if (priorityQueue.size() < k) {
		      priorityQueue.add(pair);
		   } else {
		      Pair temp = priorityQueue.peek();
			  if (pairComparator.compare(temp, pair) < 0) {
			      priorityQueue.poll();
				  priorityQueue.add(pair);
			  }
		   }
		}
		
		String[] result = new String[k];
		for (int i = k - 1; i >= 0; i--) {
		   result[i] = priorityQueue.poll().key;
		}
		
		return result;
    }
}
