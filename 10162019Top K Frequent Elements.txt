1281. Top K Frequent Elements
中文English
Given a non-empty array of integers, return the k most frequent elements.

Example
Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Notice
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

//Joel
class Pair {
    int value;
	int frequency;
	public Pair (int value, int frequency) {
	   this.value = value;
	   this.frequency = frequency;
	}
}

public class Solution {
    /**
     * @param nums: the given array
     * @param k: the given k
     * @return: the k most frequent elements
     */
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
		List<Integer> list = new ArrayList<>();
		
		PriorityQueue<Pair> queue = new PriorityQueue<>(
		   new Comparator<Pair>() {
		      public int compare (Pair left, Pair right) {
			     return right.frequency - left.frequency;
			  }
		   }
		);
		
		for (int i = 0; i < nums.length; i++) {
		   if (map.containsKey(nums[i])) {
		       map.put(nums[i], map.get(nums[i]) + 1);
		   } else {
		       map.put(nums[i], 1);
		   }
		}
		
		for (int key : map.keySet()) {
		   queue.add(new Pair(key, map.get(key)));
		}
		
		for (int i = 0; i < k; i++) {
		   list.add(queue.poll().value);
		}
		
		return list;
    }
}