402. Continuous Subarray Sum
中文English
Given an integer array, find a continuous subarray where the sum of numbers is the biggest. Your code should return the index of the first number and the index of the last number. (If their are duplicate answer, return the minimum one in lexicographical order)

Example
Example 1:

Input: [-3, 1, 3, -3, 4]
Output: [1, 4]
Example 2:

Input: [0, 1, 0, 1]
Output: [0, 3]
Explanation: The minimum one in lexicographical order.


public class Solution {
    /*
     * @param A: An integer array
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public List<Integer> continuousSubarraySum(int[] A) {
        // write your code here
    }
}


//Joel
public class Solution {
    /*
     * @param A: An integer array
     * @return: A list of integers includes the index of the first number and the index of the last number
     */
    public List<Integer> continuousSubarraySum(int[] A) {
        List<Integer> result = new ArrayList<>();
		result.add(0);
		result.add(0);
		
		int left = 0;
		int right = 0;
		int sum = 0;
		int temp = Integer.MIN_VALUE;
		
		for (int i = 0; i < A.length; i++) {
		    if (sum >= 0) {
			   sum += A[i];
			   right = i;
			} else {
			   sum = A[i];
			   left = i;
			   right = i;
			}
			
			if (sum > temp) {
			   temp = sum;
			   result.set(0, left);
			   result.set(1, right);
			}
		}
		
		return result;
    }
}