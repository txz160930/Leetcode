421. Simplify Path
??English
Given an absolute path for a file (Unix-style), simplify it.

In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double period .. moves the directory up a level.

The result must always begin with /, and there must be only a single / between two directory names. The last directory name (if it exists) must not end with a trailing /. Also, the result must be the shortest string representing the absolute path.

Example
Example 1:

Input: "/home/"
Output: "/home"
Example 2:

Input: "/a/./../../c/"
Output: "/c"
Explanation: "/" has no parent directory, so "/../" equals "/".
Notice
Did you consider the case where path is "/../"?

In this case, you should return "/".

Another corner case is the path might contain multiple slashes '/' together, such as "/home//foo/".

In this case, you should ignore redundant slashes and return "/home/foo".


public class Solution {
    /**
     * @param path: the original path
     * @return: the simplified path
     */
    public String simplifyPath(String path) {
        // write your code here
    }
}

//Joel's Code
public class Solution {
    /**
     * @param path: the original path
     * @return: the simplified path
     */
    public String simplifyPath(String path) {
        String[] stubs = path.split("/+");
        Stack<String> stack = new Stack<>();
        
        //分三种情况讨论，并且加入stack之中去
        for (String s : stubs) {
            if (s.equals("..")) {
                if (!stack.isEmpty()) {
                    stack.pop();
                }
            } else if (s.equals(".") || s.equals("")) {
                continue;
            } else {
                stack.push(s);
            }
        }

        //反加入string中
        String result = "";
        while (!stack.isEmpty()) {
            String temp = "/" + stack.pop();
            result = temp + result;
        }

        return result == "" ? "/" : result;
    }
}