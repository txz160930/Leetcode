33. Search in Rotated Sorted Array

Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

Your algorithm's runtime complexity must be in the order of O(log n).

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

// daniel's code
class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length -1;
        while(left < right){
            int mid = (left + right) / 2;
            if(nums[mid] == target ) return mid;
            if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid]){
                    right = mid -1;
                }
                else{
                    left = mid + 1;
                }
            }else{
                if (nums[mid] < target && target <= nums[right]){
                    left = mid + 1;
                }else{
                    right = mid -1;
                }
            }
        }
        
        if(nums[right] == target){
            return right;
        }else if(nums[left] == target){
            return left;
        }else{
            return -1;
        }
    }
}

// Joe's code

// 做过直接贴答案，分成两种大情况的3种小情况，一共六种情况
public class Solution {
    /**
     * @param A: an integer rotated sorted array
     * @param target: an integer to be searched
     * @return: an integer
     */
    public int search(int[] A, int target) {
	    if (A == null || A.length == 0) {
		   return -1;
		}
            int start = 0;
            int end = A.length - 1;
	     while (start + 1 < end) {
		    int mid = start + (end - start) / 2;
                        //target on the left
			if (target > A[A.length - 1]) {
			   if (A[mid] <= A[A.length - 1]) {
			      end = mid;
			   } else if (A[mid] >= target) {
			      end = mid;
			   } else if (A[mid] < target && A[mid] > A[A.length - 1]) {
			      start = mid;
			   }
			} 
                        //target on the right
                        else {
			   if (A[mid] > target && A[mid] <= A[A.length - 1]) {
			      end = mid;
			   } else if (A[mid] <= target) {
			      start = mid;
			   } else if (A[mid] > A[A.length - 1]) {
			      start = mid;
			   }
			}
		}
		
		if (A[start] == target) {
		   return start;
		}
		if (A[end] == target) {
		   return end;
		}
		
		return -1;
    }
}
