425. Letter Combinations of a Phone Number
??English
Given a digit string excluded '0' and '1', return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.

1	2
ABC	3
DEF
4
GHI	5
JKL	6
MNO
7
PQRS	8
TUV	9
WXYZ
Example
Example 1:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
Explanation: 
'2' could be 'a', 'b' or 'c'
'3' could be 'd', 'e' or 'f'
Example 2:

Input: "5"
Output: ["j", "k", "l"]
Notice
Although the answer above is in lexicographical order, your answer could be in any order you want.

//DFS

public class Solution {
    /**
     * @param digits: A digital string
     * @return: all posible letter combinations
     */
    public List<String> letterCombinations(String digits) {
    	List<String> res = new ArrayList<>();
	    if(digits.length() <= 0) return res;
	    combine("", res, digits, 0);
        return res;
    }
    public void combine(String prefix, List<String> res, String digits, int offset){
        if(offset >= digits.length()){
            res.add(prefix);
            return;
        }
        String letter = Key[digits.charAt(offset) - '0'];
        for(int i = 0; i < letter.length(); i ++){
            combine(prefix + letter.charAt(i), res, digits, offset + 1);
        }
    }
	
}


public class Solution {
    /**
     * @param digits: A digital string
     * @return: all posible letter combinations
     */
    public List<String> letterCombinations(String digits) {
	    String temp = "";
		  List<String> result = new ArrayList<>();
		
	    if (digits == null || digits.length() == 0) {
		   return result;
		  }
		
        Map<Character, char[]> map = new HashMap<>();
        map.put('2', new char[]{'a', 'b', 'c'});
        map.put('3', new char[]{'d', 'e', 'f'});
        map.put('4', new char[]{'g', 'h', 'i'});
        map.put('5', new char[]{'j', 'k', 'l'});
        map.put('6', new char[]{'m', 'n', 'o'});
        map.put('7', new char[]{'p', 'q', 'r', 's'});
        map.put('8', new char[]{'t', 'u', 'v'});
        map.put('9', new char[]{'w', 'x', 'y', 'z'});

        helper(result, temp, map, digits, 0);
        return result;
        }
	
	private void helper(List<String> result, String temp, Map<Character, char[]> map, String digits, int index) {
	    if (index == digits.length()) {
		    result.add(temp);
			return;
		}
		
		for (char c : map.get(digits.charAt(index))) {
		    temp = temp + c;
			index++;
			helper(result, temp, map, digits, index);
			index--;
			temp = temp.substring(0, temp.length() - 1);
		}
	
	}
}
