57. 3Sum
中文English
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Example
Example 1:

Input:[2,7,11,15]
Output:[]
Example 2:

Input:[-1,0,1,2,-1,-4]
Output: [[-1, 0, 1],[-1, -1, 2]]
Notice
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)

The solution set must not contain duplicate triplets.


public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    public List<List<Integer>> threeSum(int[] numbers) {
        // write your code here
    }
}


public class Solution {
    /**
     * @param numbers: Give an array numbers of n integer
     * @return: Find all unique triplets in the array which gives the sum of zero.
     */
    public List<List<Integer>> threeSum(int[] numbers) {
        List<List<Integer>> result = new ArrayList<>();
		if (numbers == null || numbers.length < 3) {
		   return result;
		}
		
		Arrays.sort(numbers);
		
		for (int i = 0; i < numbers.length; i++) {
		   int target = -numbers[i];
		   int left = i + 1;
		   int right = numbers.length - 1;
		   helper(result, left, right, target, numbers);
		}
		
		return result;
    }
	
	private void helper(List<List<Integer>> result, int left, int right, int target, int[] numbers) {
	    if (left >= right) {
		    return;
		}
		while (left < right) {
			if (target == numbers[left] + numbers[right]) {
				List<Integer> single = new ArrayList<>();
				single.add(-target);
				single.add(numbers[left]);
				single.add(numbers[right]);
				if (!result.contains(single)) {
				   result.add(single);
				}
				left++;
				right--;
			}
			else if (target > numbers[left] + numbers[right]) {
				left++;
			}
			else if (target < numbers[left] + numbers[right]) {
				right--;
			}
		}
	}
}