106. Convert Sorted List to Binary Search Tree
中文English
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

Example
Example 1:
	Input: array = 1->2->3
	Output:
		 2  
		/ \
	    1  3
		
Example 2:
	Input: 2->3->6->7
	Output:
		 3
		/ \
	   2   6
		     \
		      7

	Explanation:
	There may be multi answers, and you could return any of them.
	
	
/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param head: The first node of linked list.
     * @return: a tree node
     */
	private ListNode current;
	
    public TreeNode sortedListToBST(ListNode head) {
        int size = getListLength(head);
		current = head;
		return sortedListToBSTHelper(size);
    }
	
	private int getListLength(ListNode head) {
	    int size = 0;
		while (head != null) {
		   size++;
		   head = head.next;
		}
		return size;
	}
	
    public TreeNode sortedListToBSTHelper(int size) {
        if (size <= 0) {
            return null;
        }

        TreeNode left = sortedListToBSTHelper(size / 2);
		TreeNode root = new TreeNode(current.val);
        current = current.next;
        TreeNode right = sortedListToBSTHelper(size - 1 - size / 2);

        root.left = left;
        root.right = right;

        return root;
    }
}