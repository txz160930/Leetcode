1101. Maximum Width of Binary Tree
中文English
Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example
Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,#,9).
Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).
Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).
Example 4:

Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
		
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,#,#,#,#,#,#,7).
Notice
The answer will be in the range of 32-bit signed integer.


/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the root
     * @return: the maximum width of the given tree
     */
    public int widthOfBinaryTree(TreeNode root) {
        if (root == null) {
		    return 0;
		}
		
		Queue<TreeNode> queue = new LinkedList<>();
		queue.add(root);
		root.val = 0;
		int max = 1;
		
		while (queue.size() > 0) {
		   int size = queue.size();
		   int minValue = Integer.MAX_VALUE;
		   int maxValue = Integer.MIN_VALUE;
		   for (int i = 0; i < size; i++) {
		      root = queue.poll();
			  if (root.left != null) {
			     root.left.val = root.val * 2;
				 queue.add(root.left);
			  }
			  if (root.right != null) {
			     root.right.val = root.val * 2 + 1;
				 queue.offer(root.right);
			  }
			  if (i == 0) {
			     minValue = root.val;
			  }
			  if (i == size - 1) {
			     maxValue = root.val;
			  }
		   }
		   max = Math.max(max, maxValue - minValue + 1);
		}
		
		return max;
    }
}



//Joel
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the root
     * @return: the maximum width of the given tree
     */
    public int widthOfBinaryTree(TreeNode root) {
        // Write your code here
    }
}