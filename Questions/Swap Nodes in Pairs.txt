451. Swap Nodes in Pairs
??English
Given a linked list, swap every two adjacent nodes and return its head.

Example
Example 1:

Input: 1->2->3->4->null
Output: 2->1->4->3->null
Example 2:

Input: 5->null
Output: 5->null
Challenge
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: a ListNode
     * @return: a ListNode
     */
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(1);
		dummy.next = head;
		ListNode pointer = dummy;
		while (pointer.next != null && pointer.next.next != null) {
		   ListNode left = pointer;
		   ListNode right = pointer.next;
		   left.next = right.next;
		   right.next = left.next.next;
		   left.next.next = right;
		   pointer = pointer.next.next;
		}
		return dummy.next;
    }
}