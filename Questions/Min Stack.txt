12. Min Stack
??English
Implement a stack with following functions:

push(val) push val into the stack
pop() pop the top element and return it
min() return the smallest number in the stack
All above should be in O(1) cost.

Example
Example 1:

Input:
  push(1)
  pop()
  push(2)
  push(3)
  min()
  push(1)
  min()
Output:
  1
  2
  1
Example 2:

Input:
  push(1)
  min()
  push(2)
  min()
  push(3)
  min()
Output:
  1
  1
  1
Notice
min() will never be called when there is no number in the stack.


public class MinStack {
    private Stack<Integer> stack;
	private Stack<Integer> minStack;
    public MinStack() {
        stack = new Stack<>();
		minStack = new Stack<>();
    }

    /*
     * @param number: An integer
     * @return: nothing
     */
    public void push(int number) {
	    stack.push(number);
		if (minStack.isEmpty()) {
		    minStack.push(number);
		}
		else if (minStack.peek() >= number) {
		    minStack.push(number);
		}
    }

    /*
     * @return: An integer
     */
    public int pop() {
        if (minStack.peek().equals(stack.peek())) {
		    minStack.pop();
		}
		return stack.pop();
    }

    /*
     * @return: An integer
     */
    public int min() {
        return minStack.peek();
    }
}