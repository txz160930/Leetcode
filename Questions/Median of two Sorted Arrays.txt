65. Median of two Sorted Arrays
??English
There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.

Example
Example 1

Input:
A = [1,2,3,4,5,6]
B = [2,3,4,5]
Output: 3.5
Example 2

Input:
A = [1,2,3]
B = [4,5]
Output: 3
Challenge
The overall run time complexity should be O(log (m+n)).

Clarification
The definition of the median:

The median here is equivalent to the median in the mathematical definition.

The median is the middle of the sorted array.

If there are n numbers in the array and n is an odd number, the median is A[(n-1)/2]A[(n-1)/2].

If there are n numbers in the array and n is even, the median is (A[n / 2] + A[n / 2 + 1]) / 2.

For example, the median of the array A=[1,2,3] is 2, and the median of the array A=[1,19] is 10.

//需要继续研究
public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        int n = A.length + B.length;
        
        //假设是偶数
        if (n % 2 == 0) {
            return (findKth(A, 0, B, 0, n / 2) + 
                    findKth(A, 0, B, 0, n / 2 + 1)) / 2.0;
        }
        
        //假设是奇数，搞递归
        return findKth(A, 0, B, 0, n / 2 + 1);
    }
    
    private int findKth(int[] A, int indexA, int[] B, int indexB, int k) {
        //超过就return其他的
        if (indexA >= A.length) {
            return B[indexB + k - 1];
        }
        if (indexB >= B.length) {
            return A[indexA + k - 1];
        }
        
        //如果只剩1了，最小的
        if (k == 1) {
            return Math.min(A[indexA], B[indexB]);
        }
        
        int halfKthOfA = 0;
        int halfKthOfB = 0;
        if (indexA + k / 2 - 1 < A.length) {
            halfKthOfA = A[indexA + k / 2 - 1];
        } else {
            halfKthOfA = Integer.MAX_VALUE;
        }
        
        if (indexA + k / 2 - 1 < B.length) {
            halfKthOfB = B[indexB + k / 2 - 1];
        } else {
            halfKthOfB = Integer.MAX_VALUE;
        }
        
        //进行比较中间的数
        if (halfKthOfA < halfKthOfB) {
            return findKth(A, indexA + k / 2, B, indexB, k - k / 2);
        } else {
            return findKth(A, indexA, B, indexB + k / 2, k - k / 2);
        }
    }
}
