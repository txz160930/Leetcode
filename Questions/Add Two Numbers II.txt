221. Add Two Numbers II
??English
You have two numbers represented by linked list, where each node contains a single digit. The digits are stored in forward order, such that the 1's digit is at the head of the list. Write a function that adds the two numbers and returns the sum as a linked list.

Example
Example 1:

Input: 6->1->7   2->9->5
Output: 9->1->2
Example 2:

Input: 1->2->3   4->5->6
Output: 5->7->9

/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param l1: The first list.
     * @param l2: The second list.
     * @return: the sum list of l1 and l2.
     */
    public ListNode addLists2(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
		l2 = reverse(l2);
		ListNode l3 = helper(l1, l2);
		return reverse(l3);
    }
	
	private ListNode helper(ListNode l1, ListNode l2) {
	    ListNode dummy = new ListNode(0);
		ListNode pointer = dummy;
		int carryOn = 0;
		int temp = 0;
		
		while (l1 != null && l2 != null) {
		    temp = l1.val + l2.val + carryOn;
			pointer.next = new ListNode(temp % 10);
			if (temp >= 10) {
			    carryOn = 1;
			} else {
			    carryOn = 0;
			}
			l1 = l1.next;
			l2 = l2.next;
			pointer = pointer.next;
		}
		
		while (l1 != null) {
		    temp = l1.val + carryOn;
			pointer.next = new ListNode(temp % 10);
			if (temp >= 10) {
			    carryOn = 1;
			} else {
			    carryOn = 0;
			}
			l1 = l1.next;
			pointer = pointer.next;
		}
		
		while (l2 != null) {
		    temp = l2.val + carryOn;
			pointer.next = new ListNode(temp % 10);
			if (temp >= 10) {
			    carryOn = 1;
			} else {
			    carryOn = 0;
			}
			l2 = l2.next;
			pointer = pointer.next;
		}
		
		if (carryOn != 0) {
		    pointer.next = new ListNode(carryOn);
		}
		
		return dummy.next;
	}
	
	private ListNode reverse(ListNode head) {
	    ListNode prev = null;
		while (head != null) {
		     ListNode temp = head.next;
			 head.next = prev;
			 prev = head;
			 head = temp;
		}
		return prev;
	}
}