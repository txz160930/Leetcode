860. Number of Distinct Islands
中文English
Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical). You may assume all four edges of the grid are surrounded by water.

Count the number of distinct islands. An island is considered to be the same as another if and only if one island has the same shape as another island (and not rotated or reflected).

Notice that:

11
1
and

 1
11
are considered different island, because we do not consider reflection / rotation.

Example
Example 1:

Input: 
  [
    [1,1,0,0,1],
    [1,0,0,0,0],
    [1,1,0,0,1],
    [0,1,0,1,1]
  ]
Output: 3
Explanation:
  11   1    1
  1        11   
  11
   1
Example 2:

Input:
  [
    [1,1,0,0,0],
    [1,1,0,0,0],
    [0,0,0,1,1],
    [0,0,0,1,1]
  ]
Output: 1
Notice
The length of each dimension in the given grid does not exceed 50.

//Daniel
public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: return an integer, denote the number of distinct islands
     */
    public int numberofDistinctIslands(int[][] grid) {
        // write your code here
        int res = 0;
        if(grid.length == 0) return 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == '1'){
                    helper(grid, i, j);
                    res++;
                }
            }
        }
        return res;
    }
    
    public void helper(char[][] grid, int i, int j){
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0' ) return;
        else{
            grid[i][j] = '0';
            helper(grid, i+1, j);
            helper(grid, i, j+1);
            helper(grid, i-1, j);
            helper(grid, i, j-1);
        }
    }
}


//Joel
//BFS + HashSet
class Pair {
    public int x;
	public int y;
    public Pair(int x, int y) {
	    this.x = x;
	    this.y = y;
	}
}

public class Solution {
    /**
     * @param grid: a list of lists of integers
     * @return: return an integer, denote the number of distinct islands
     */
	
	public int[] X = {0, 1, -1, 0};
	public int[] Y = {-1, 0, 0, 1};
    public int numberofDistinctIslands(int[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
		   return 0;
		}
		
		Set<String> set = new HashSet<>();
		for (int i = 0; i < grid.length; i++) {
		   for (int j = 0; j < grid[0].length; j++) {
		       if (grid[i][j] == 1) {
			      bfs(grid, i, j, set);
			   }
		   }
		}
		
		return set.size();
    }
	
	public void bfs(int[][] grid, int i, int j, Set<String> set) {
	    Queue<Pair> queue = new LinkedList<>();
		queue.add(new Pair(i, j));
		grid[i][j] = 0;
		StringBuilder sb = new StringBuilder();
		
		while (queue.size() > 0) {
		   Pair temp = queue.poll();
		   for (int k = 0; k < 4; k++) {
		      int tempX = temp.x + X[k];
			  int tempY = temp.y + Y[k];
			  if (tempX >= 0 && tempX < grid.length && tempY >=0 && tempY < grid[0].length) {
			      if (grid[tempX][tempY] == 1) {
				     sb.append(tempX - i);
					 sb.append(' ');
					 sb.append(tempY - j);
					 sb.append(' ');
					 grid[tempX][tempY] = 0;
					 queue.add(new Pair(tempX, tempY));
				  }
			  }
		   }
		}
		
		if (!set.contains(sb.toString())) {
		    set.add(sb.toString());
		}
	}
}
