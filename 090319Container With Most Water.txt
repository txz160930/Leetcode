383. Container With Most Water
中文English
Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Example
Example 1:

Input: [1, 3, 2]
Output: 2
Explanation:
Selecting a1, a2, capacity is 1 * 1 = 1
Selecting a1, a3, capacity is 1 * 2 = 2
Selecting a2, a3, capacity is 2 * 1 = 2
Example 2:

Input: [1, 3, 2, 2]
Output: 4
Explanation:
Selecting a1, a2, capacity is 1 * 1 = 1
Selecting a1, a3, capacity is 1 * 2 = 2
Selecting a1, a4, capacity is 1 * 3 = 3
Selecting a2, a3, capacity is 2 * 1 = 2
Selecting a2, a4, capacity is 2 * 2 = 4
Selecting a3, a4, capacity is 2 * 1 = 2
Notice
You may not slant the container.


public class Solution {
    /**
     * @param heights: a vector of integers
     * @return: an integer
     */
    public int maxArea(int[] heights) {
        // write your code here
    }
}


设定两个指针, 初始在两端, 计算这两个组成的容量, 然后移动值较小的那个, 所有计算结果取最大.

可以反证法证明这样可以得到最优答案
public class Solution {
    /**
     * @param heights: a vector of integers
     * @return: an integer
     */
    public int maxArea(int[] heights) {
        if (heights == null || heights.length < 2) {
		   return 0;
		}
		int max = Integer.MIN_VALUE;
		int left = 0;
		int right = heights.length - 1;
		while (left < right) {
		   max = Math.max(max, (right - left) * Math.min(heights[left], heights[right]);
		   if (heights[left] < heights[right]) {
		      left++;
		   } else {
		      right--;
		   }
		}
		
		return max;
    }
}