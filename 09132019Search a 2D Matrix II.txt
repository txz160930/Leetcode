38. Search a 2D Matrix II
中文English
Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.

This matrix has the following properties:

Integers in each row are sorted from left to right.
Integers in each column are sorted from up to bottom.
No duplicate integers in each row or column.
Example
Example 1:

Input:
	[[3,4]]
	target=3
Output:1
Example 2:

Input:
    [
      [1, 3, 5, 7],
      [2, 4, 7, 8],
      [3, 5, 9, 10]
    ]
    target = 3
Output:2
Challenge
O(m+n) time and O(1) extra space


//Joel
//从左下角向右上角逼近
public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param target: An integer you want to search in matrix
     * @return: An integer indicate the total occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
		   return 0;
		}
		
		int n = matrix.length;
		int m = matrix[0].length;
		int x = n - 1;
		int y = 0;
		int count = 0;
		
		while (y < m && x >= 0) {
		   if (matrix[x][y] < target) {
		      y++;
		   } else if (matrix[x][y] > target) {
		      x--;
		   } else {
		      count++;
			  y++;
			  x--;
		   }
		}
		
		return count;
    }
}

public class Solution {
    /**
     * @param matrix: A list of lists of integers
     * @param target: An integer you want to search in matrix
     * @return: An integer indicate the total occurrence of target in the given matrix
     */
    public int searchMatrix(int[][] matrix, int target) {

    }
}