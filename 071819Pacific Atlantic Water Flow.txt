778. Pacific Atlantic Water Flow
中文English
Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the "Pacific ocean" touches the left and top edges of the matrix and the "Atlantic ocean" touches the right and bottom edges.

Water can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.

Find the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.

Example
Example 1:

Input:
matrix = 
[[1,2,2,3,5],
[3,2,3,4,4],
[2,4,5,3,1],
[6,7,1,4,5],
[5,1,1,2,4]]
Output:
[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Explanation:
Pacific ~ ~ ~ ~ ~
      ~ 1 2 2 3 5 *
      ~ 3 2 3 4 4 *
      ~ 2 4 5 3 1 *
      ~ 6 7 1 4 5 *
      ~ 5 1 1 2 4 *
        * * * * * Atlantic
Example 2:

Input:
matrix =
[[1,2],
[4,3]]
Output:
[[0,1],[1,0],[1,1]]
Notice
1.The order of returned grid coordinates does not matter.
2.Both m and n are less than 150.

//Daniel's Code
public class Solution {
    /**
     * @param matrix: the given matrix
     * @return: The list of grid coordinates
     */
    public int n;
    public int m;
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        // write your code here
	List<List<Integer>> res = new ArrayList<>();
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return res;
        }
        m = matrix.length;
        n = matrix[0].length;
        boolean[][] pacific = new boolean[m][n];
        boolean[][] atlantic = new boolean[m][n];
        for (int i = 0; i < m; i++){
            helper(matrix, pacific, 0, i, 0);
            helper(matrix, atlantic, 0, i, n - 1);
        }
        for (int i = 0; i < n; i++){
            helper(matrix, pacific, 0, 0, i);
            helper(matrix, atlantic, 0, m - 1, i);
        }
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (pacific[i][j] && atlantic[i][j]){
                    List<Integer> list = new ArrayList<>();
                    list.add(i);
                    list.add(j);
                    res.add(list);
                }
            }
        }
        return res;
    }
    
    private void helper(int[][] matrix, boolean[][] visited, int pre, int i, int j){
        if (i < 0 || i >= m || j < 0 || j >= n || visited[i][j] || matrix[i][j] < pre){
            return;
        }    
        visited[i][j] = true;
        helper(matrix, visited, matrix[i][j], i - 1, j);
        helper(matrix, visited, matrix[i][j], i, j - 1);
        helper(matrix, visited, matrix[i][j], i + 1, j);
        helper(matrix, visited, matrix[i][j], i, j + 1);
    }
}

//Joel's Code
//分别对其做DFS并且匹配之
public class Solution {
    /**
     * @param matrix: the given matrix
     * @return: The list of grid coordinates
     */
	int[] dx = {0, -1, 0, 1};
	int[] dy = {1, 0 , -1, 0};
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        List<List<Integer>> result = new ArrayList<>();
		if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
		    return result;
		}
		
		int n = matrix.length;
		int m = matrix[0].length;
		boolean[][] Pacific = new boolean[n][m];
		boolean[][] Atlantic = new boolean[n][m];
		
		for (int i = 0; i < n; i++) {
		   dfs(matrix, Pacific, Integer.MIN_VALUE, i, 0);
		   dfs(matrix, Atlantic, Integer.MIN_VALUE, i, m - 1);
		}
		
		for (int i = 0; i < m; i++) {
		   dfs(matrix, Pacific, Integer.MIN_VALUE, 0, i);
		   dfs(matrix, Atlantic, Integer.MIN_VALUE, n - 1, i);
		}
		
		for (int i = 0; i < n; i++) {
		   for (int j = 0; j < m; j++) {
		      if (Pacific[i][j] == Atlantic[i][j] && Pacific[i][j] == true) {
			     List<Integer> temp = new ArrayList<>();
				 temp.add(i);
				 temp.add(j);
			     result.add(temp);
			  }
		   }
		}
		
		return result;
    }
	
	private void dfs(int[][] matrix, boolean[][] visited, int height, int x, int y) {
	    int n = matrix.length;
		int m = matrix[0].length;
		if (x < 0 || x >= n || y < 0 || y >= m || height > matrix[x][y] || visited[x][y] == true) {
		   return;
		}
		visited[x][y] = true;
		
		for (int i = 0; i < 4; i++) {
		   dfs(matrix, visited, matrix[x][y], x + dx[i], y + dy[i]);
		}
	}
}
