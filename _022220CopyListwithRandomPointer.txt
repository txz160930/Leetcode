105. Copy List with Random Pointer
中文English
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

Challenge
Could you solve it with O(1) space?



//Joel's Code
/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return null;
        }
        
        Map<RandomListNode, RandomListNode> map = new HashMap<>();
        RandomListNode newHead = new RandomListNode(head.label);
        map.put(head, newHead);
        RandomListNode pointer = newHead;
        while (head != null) {
            if (head.next != null) {
                RandomListNode tempNext = head.next;
                if (!map.containsKey(tempNext)) {
                    map.put(tempNext, new RandomListNode(tempNext.label));
                }
                pointer.next = map.get(head.next);
            }
            if (head.random != null) {
                RandomListNode tempRandom = head.random;
                if (!map.containsKey(tempRandom)) {
                    map.put(tempRandom, new RandomListNode(tempRandom.label));
                }
                pointer.random = map.get(tempRandom);
            }
            pointer = pointer.next;
            head = head.next;
        }
        
        return newHead;
    }
}