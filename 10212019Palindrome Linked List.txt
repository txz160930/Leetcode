223. Palindrome Linked List
中文English
Implement a function to check if a linked list is a palindrome.

Example
Example 1:

Input: 1->2->1
output: true
Example 2:

Input: 2->2->1
output: false
Challenge
Could you do it in O(n) time and O(1) space?


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: A ListNode.
     * @return: A boolean.
     */
    public boolean isPalindrome(ListNode head) {
        if (head == null) {
		   return true;
		}
		
		ListNode middle = findMiddle(head);
		middle.next = reverse(middle.next);
		
		ListNode p1 = head;
		ListNode p2 = middle.next;
		while (p1 != null && p2 != null) {
		   if (p1.val == p2.val) {
			   p1 = p1.next;
			   p2 = p2.next;
		   }
		   else {
		       return false;
		   }
		}
		
		return true;
    }
	
	private ListNode findMiddle(ListNode head) {
	    if (head == null) {
		    return null;
		}
		ListNode slow = head;
		ListNode fast = head.next;
		while (fast != null && fast.next != null) {
		    slow = slow.next;
			fast = fast.next.next;
		}
		return slow;
	}
	
	private ListNode reverse(ListNode head) {
	    ListNode prev = null;
		
		while (head != null) {
		   ListNode temp = head.next;
		   head.next = prev;
		   prev = head;
		   head = temp;
		}
		
		return prev;
	}
}