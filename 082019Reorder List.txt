99. Reorder List
中文English
Given a singly linked list L: L0 → L1 → … → Ln-1 → Ln

reorder it to: L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …

Example
Example 1:
	Input:  1->2->3->4->null
	Output: 1->4->2->3->null

Example 2:
	Input: 1->2->3->4->5->null
	Output: 1->5->2->4->3->null
	
Challenge
Can you do this in-place without altering the nodes' values?


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: nothing
     */
    public void reorderList(ListNode head) {
        // write your code here
    }
}



/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
//找到重点，反转链表，合并链表
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: nothing
     */
    public void reorderList(ListNode head) {
        if (head == null || head.next == null) {
		   return;
		}
		
		ListNode mid = findMddile(head);
		ListNode tail = reverse(mid.next);
		mid.next = null;
		
		merge(head, tail);
    }
	
	private ListNode findMddile(ListNode head) {
	   ListNode slow = head;
	   ListNode fast = head.next;
	   while (fast != null && fast.next != null) {
	      fast = fast.next.next;
		  slow = slow.next;
	   }
	   return slow;
	}
	
	private ListNode reverse(ListNode head) {
	   ListNode previous = null;
	   while (head != null) {
	      ListNode temp = head.next;
		  head.next = previous;
		  previous = head;
		  head = temp;
	   }
	   return previous;
	}
	
	private void merge (ListNode head1, ListNode head2) {
	   int index = 0;
	   ListNode dummy = new ListNode(0);
	   while (head1 != null || head2 != null) {
	       if (index % 2 == 0) {
		       dummy.next = head1;
			   head1 = head1.next;
		   } else {
		       dummy.next = head2;
			   head2 = head2.next;
		   }
		   dummy = dummy.next;
		   index++;
	   }
	}
}

