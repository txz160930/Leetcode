1031. Is Graph Bipartite?
中文English
Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.

The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists. Each node is an integer between 0 and graph.length - 1.

There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.

Example
Example 1:

Input: [[1,3], [0,2], [1,3], [0,2]]
Output: true
Explanation: 
  The graph looks like this:
  0----1
  |    |
  |    |
  3----2
  We can divide the vertices into two groups: {0, 2} and {1, 3}.
Example 2:

Input: [[1,2,3], [0,2], [0,1,3], [0,2]]
Output: false
Explanation: 
  The graph looks like this:
  0----1
  | \  |
  |  \ |
  3----2
  We cannot find a way to divide the set of nodes into two independent subsets.
Notice
graph will have length in range [1, 100].
graph[i] will contain integers in range [0, graph.length - 1].
graph[i] will not contain i or duplicate values.
The graph is undirected: if any element j is in graph[i], then i will be in graph[j].


public class Solution {
    /**
     * @param graph: the given undirected graph
     * @return:  return true if and only if it is bipartite
     */
    public boolean isBipartite(int[][] graph) {
        // Write your code here
    }
}

public class Solution {
    /**
     * @param graph: the given undirected graph
     * @return:  return true if and only if it is bipartite
     */
    public boolean isBipartite(int[][] graph) {
        int n = graph.length;
		int[] colors = new int[n];
		
		for (int i = 0; i < graph.length; i++) {
		//对其做bfs，搞没有访问到的情况
		   if (colors[i] == 0) {
		      if (helper(i, colors, graph) == false) {
			      return false;
			  }
		   }
		}
		
		return true;
    }
	
	private boolean helper(int i, int[] colors, int[][] graph) {
	    Queue<Integer> queue = new LinkedList<>();
		queue.offer(i);
		colors[i] = 1;
		
		while (queue.size() > 0) {
		    int temp = queue.poll();
			int[] neighbors = graph[temp];
			for (int neighbor : neighbors) {
			   if (colors[neighbor] != 0) {
			   //如果访问到，看他的眼色和相邻的眼色是不是一样
			      if (colors[temp] == colors[neighbor]) {
				     return false;
				  }
			   } 
			   else {
			   //如果没有访问到，那么让她的值被3种颜色剪掉
			      colors[neighbor] = 3 - colors[temp];
				  queue.add(neighbor);
			   }
			}
		}
		
		return true;
	}
}