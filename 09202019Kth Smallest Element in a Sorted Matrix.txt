1272. Kth Smallest Element in a Sorted Matrix
中文English
Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

Example
Example1

Input:
[[ 1,  5,  9],[10, 11, 13],[12, 13, 15]]
8
Output: 13
Example2

Input:
[[-5]]
1
Output: -5
Challenge
If k << n^2, what's the best algorithm?
How about k ~ n^2?

Notice
You may assume k is always valid, 1 ≤ k ≤ n^2.


public class Solution {
    /**
     * @param matrix: List[List[int]]
     * @param k: a integer
     * @return: return a integer
     */
    public int kthSmallest(int[][] matrix, int k) {
        // write your code here
    }
}

//二分答案
public class Solution {
    /**
     * @param matrix: List[List[int]]
     * @param k: a integer
     * @return: return a integer
     */
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        
        int lo = matrix[0][0];
        int hi = matrix[n - 1][n - 1];
        while (lo + 1 < hi) {
            int mid = lo + (hi - lo) / 2;
            if (countLessEqual(matrix, mid) >= k) {
                hi = mid;
            } else {
                lo = mid;
            }
        }
        
        if (countLessEqual(matrix, lo) >= k) {
            return lo;
        }
        
        return hi;
    }
    
    private int countLessEqual(int[][] matrix, int value) {
        int cnt = 0;
        for (int[] row : matrix) {
            int start = 0, end = row.length - 1;
            while (start + 1 < end) {
                int mid = start + (end - start) / 2;
                if (row[mid] > value) {
                    end = mid;
                } else {
                    start = mid;
                }
            }
            
            if (row[start] > value) {
                cnt += start;
            } else if (row[end] > value) {
                cnt += end;
            } else {
                cnt += row.length;
            }
        }
        
        return cnt;
    }
}
