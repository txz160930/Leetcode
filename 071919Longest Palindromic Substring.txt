200. Longest Palindromic Substring
中文English
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

Example
Example 1:

Input:"abcdzdcab"
Output:"cdzdc"
Example 2:

Input:"aba"
Output:"aba"
Challenge
O(n2) time is acceptable. Can you do it in O(n) time.

//Daniel
public class Solution {
    /**
     * @param s: input string
     * @return: the longest palindromic substring
     */
    String res = "";
    public String longestPalindrome(String s) {
        // write your code here
	if (s ==null || s.length() == 0) return res;
        for (int i = 0; i < s.length(); i++){
            //odd
            helper(s, i, i); //assume odd length, try to extend Palindrome as possible
            //even
            helper(s, i, i + 1);//assume even length.
        }
        return res;
    }
    
    public void helper(String s, int left, int right){
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){
            left--;
            right++;
        }
        String str = s.substring(left + 1, right);
        if (str.length() > res.length()){
            res = str;
        }
    }
}


//Joel

//只能n平方做了
public class Solution {
    /**
     * @param s: input string
     * @return: the longest palindromic substring
     */
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 0) {
		   return s;
		}
		
		String result = "";
		for (int i = 0; i < s.length(); i++) {
		    result = helper(s, result, i, i);
		}
		for (int i = 0; i < s.length() - 1; i++) {
		    result = helper(s, result, i, i + 1);
		}
		
		return result;
    }
	
	private String helper(String s, String result, int start, int end) {
	    while (start >= 0 && end < s.length()) {
		   if (s.charAt(start) == s.charAt(end)) {
		      String temp = s.substring(start, end + 1);
			  if (temp.length() > result.length()) {
		          result = temp;
		      }
			  start--;
		      end++;
		   } else {
		     break;
		   }
		}
		return result;
	}
}
