52. Next Permutation
中文English
Given a list of integers, which denote a permutation.

Find the next permutation in ascending order.

Example
Example 1:

Input:[1]
Output:[1]
Example 2:

Input:[1,3,2,3]
Output:[1,3,3,2]
Example 3:

Input:[4,3,2,1]
Output:[1,2,3,4]
Notice
The list may contains duplicate integers.

public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers
     */
    public int[] nextPermutation(int[] nums) {
        // write your code here
    }
}

从最后一个位置开始，找到一个上升点，上升点之前的无需改动。
然后，翻转上升点之后的降序。
在降序里，找到第一个比上升点大的，交换位置。
//Joel
public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers
     */
    public int[] nextPermutation(int[] nums) {
        if (nums == null || nums.length == 0 || nums.length == 1) {
		    return nums;
		}
		
		int i = nums.length - 1;
		while (i > 0 && nums[i - 1] >= nums[i]) {
		    i--;
		}
		swapList(nums, i, nums.length - 1);
		if (i != 0) {
		    int j = i;
			while (nums[j] <= nums[i - 1]) {
			   j++;
			}
			int temp = nums[i - 1];
			nums[i - 1] = nums[j];
			nums[j] = temp;
		}
		
		return nums;
    }
	
	private void swapList(int[] nums, int i, int j) {
	    while (i < j) {
		   int temp = nums[i];
		   nums[i] = nums[j];
		   nums[j] = temp;
		   i++;
		   j--;
		}
	}
}