65. Median of two Sorted Arrays
??English
There are two sorted arrays A and B of size m and n respectively. Find the median of the two sorted arrays.

Example
Example 1

Input:
A = [1,2,3,4,5,6]
B = [2,3,4,5]
Output: 3.5
Example 2

Input:
A = [1,2,3]
B = [4,5]
Output: 3
Challenge
The overall run time complexity should be O(log (m+n)).

Clarification
The definition of the median:

The median here is equivalent to the median in the mathematical definition.

The median is the middle of the sorted array.

If there are n numbers in the array and n is an odd number, the median is A[(n-1)/2]A[(n-1)/2].

If there are n numbers in the array and n is even, the median is (A[n / 2] + A[n / 2 + 1]) / 2.

For example, the median of the array A=[1,2,3] is 2, and the median of the array A=[1,19] is 10.

//Daniel's code
//完全不會
public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length, len2 = nums2.length, sumLen = len1 + len2;
        if (sumLen % 2 != 0) {

            return findKthSmallest(nums1, len1, 0, nums2, len2, 0, sumLen / 2 + 1);
        } else {
            return (findKthSmallest(nums1, len1, 0, nums2, len2, 0, sumLen / 2)
                    + findKthSmallest(nums1, len1, 0, nums2, len2, 0, sumLen / 2 + 1)) / 2.0;
        }
    }
        
    public static int findKthSmallest(int[] a, int m, int begin1, int[] b, int n, int begin2, int k) {
        if (m > n)
            return findKthSmallest(b, n, begin2, a, m, begin1, k);
        if (m == 0)
            return b[begin2 + k - 1];
        if (k == 1)
            return Integer.min(a[begin1], b[begin2]);
        int partA = Integer.min(k / 2, m), partB = k - partA;
        if (a[begin1 + partA - 1] == b[begin2 + partB - 1])
            return a[begin1 + partA - 1];
        else if (a[begin1 + partA - 1] > b[begin2 + partB - 1])
            return findKthSmallest(a, m, begin1, b, n - partB, begin2 + partB, k - partB);
        else
            return findKthSmallest(a, m - partA, begin1 + partA, b, n, begin2, k - partA);
    }
}


public class Solution {
    /*
     * @param A: An integer array
     * @param B: An integer array
     * @return: a double whose format is *.5 or *.0
     */
    public double findMedianSortedArrays(int[] A, int[] B) {
        // write your code here
    }
}
