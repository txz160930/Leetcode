96. Partition List
中文English
Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Example
Example 1:

Input:  list = null, x = 0
Output: null    
Explanation: The empty list Satisfy the conditions by itself.
Example 2:

Input:  list = 1->4->3->2->5->2->null, x = 3
Output: 1->2->2->4->3->5->null  
Explanation:  keep the original relative order of the nodes in each of the two partitions.


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param head: The first node of linked list
     * @param x: An integer
     * @return: A ListNode
     */
    public ListNode partition(ListNode head, int x) {
        // write your code here
    }
}

/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

//轻而易举
public class Solution {
    /**
     * @param head: The first node of linked list
     * @param x: An integer
     * @return: A ListNode
     */
    public ListNode partition(ListNode head, int x) {
        if (head == null) {
            return null;
        }
        
        ListNode dummy1 = new ListNode(0);
        ListNode head1 = dummy1;
        ListNode dummy2 = new ListNode(1);
        ListNode head2 = dummy2;
        
        while (head != null) {
            if (head.val < x) {
                head1.next = head;
                head1 = head;
            } else {
                head2.next = head;
                head2 = head;
            }
            head = head.next;
        }
        
        head1.next = dummy2.next;
        head2.next = null;
        return dummy1.next;
    }
}