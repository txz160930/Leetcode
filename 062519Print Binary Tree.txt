1105. Print Binary Tree
??English
Print a binary tree in an m*n 2D string array following these rules:

The row number m should be equal to the height of the given binary tree.
The column number n should always be an odd number.
The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them.
Each unused space should contain an empty string "".
Print the subtrees following the same rules.
Example
Example 1:

Input:{1,2}
    1
   /
  2
Output:
 [["", "1", ""],
  ["2", "", ""]]
Example 2:

Input:{1,2,3,#,4}
    1
   / \
  2   3
   \
    4
Output:
 [["", "", "", "1", "", "", ""],
  ["", "2", "", "", "", "3", ""],
  ["", "", "4", "", "", "", ""]]
Example 3:

Input:{1,2,5,3,#,#,#,4}
        1
       / \
      2   5
     / 
    3 
   / 
  4 
Output:
 [["",  "",  "", "",  "", "", "", "1", "",  "",  "",  "",  "", "", ""]
  ["",  "",  "", "2", "", "", "", "",  "",  "",  "",  "5", "", "", ""]
  ["",  "3", "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]
  ["4", "",  "", "",  "", "", "", "",  "",  "",  "",  "",  "", "", ""]]
Notice
The height of binary tree is in the range of [1, 10].

Daniel's Code
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<String>> printTree(TreeNode root) {
        int high = high(root);
        int wide = (int) Math.pow(2, high) - 1;
        List<List<String>> result = new ArrayList<>();
        // 這時候要遍歷深度和廣度，所以需要兩個for loop
        for(int i = 0; i < high; i++){
        	//每一次的for loop都要是新的，所以在這裡加
        	List<String> list = new ArrayList<>();
        	for(int j = 0; j < wide; j++){
        		list.add("");
        	}
        	result.add(list);
        }
        print(result, root, 0, 0, wide -1);
        return result;
    }

    public void print(List<List<String>> result, TreeNode root, int row, int left, int right){
    	//這裡就是應用到 binary search 由中間分兩部分 --> 這裡可以延伸很多題目
    	if(root == null) return;
    	int center = (left + right) / 2;
    	result.get(row).set(center, String.valueOf(root.val));
    	//這裡就是recursive 分兩部分
    	print(result, root.left, row + 1, left, center);
    	print(result, root.right, row + 1, center + 1, right);
    }
    private int high(TreeNode node) {
        if (node == null) return 0;
        return 1 + Math.max(high(node.left), high(node.right));
    }
}




---------------------------------------------------------------------------------------------

Joel's Code
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: the given tree
     * @return: the binary tree in an m*n 2D string array
     */
    public List<List<String>> printTree(TreeNode root) {
        List<List<String>> result = new ArrayList<>();
		if (root == null) {
		   return result;
		}
	    int height = getHeight(root);
		int rows = height;
		int columns = (int) Math.pow(2, height) - 1;
		List<String> row = new ArrayList<>();
		for (int i = 0; i < columns; i++) {
		   row.add("");
		}
		for (int i = 0; i < rows; i++) {
		   result.add(new ArrayList<>(row));
		}
		helper(result, root, 0, columns - 1, 0);
		return result;
    }
	
	public void helper(List<List<String>> result, TreeNode root, int start, int end, int rowIndex) {
	    if (root == null) {
		   return;
		}
		int mid = start + (end - start) / 2;
		result.get(rowIndex).set(mid, String.valueOf(root.val));
		helper(result, root.left, start, mid - 1, rowIndex + 1);
		helper(result, root.right, mid + 1, end, rowIndex + 1);
	}
	
	private int getHeight(TreeNode root) {
	    if (root == null) {
		   return 0;
		}
		return 1 + Math.max(getHeight(root.left), getHeight(root.right));
	}
}