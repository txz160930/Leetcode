381. Spiral Matrix II
中文English
Given an integer n, generate a square matrix filled with elements from 1 to n^2n
​2
​​  in spiral order.

(The spiral rotates clockwise from the outside to the inside, referring to examples)

Example
Example 1:

input: 2
output:
[
  [1, 2],
  [4, 3]
]
Example 2:

input: 3
output:
[
  [ 1, 2, 3 ],
  [ 8, 9, 4 ],
  [ 7, 6, 5 ]
]

// Daniel's code
public class Solution {
    /**
     * @param n: An integer
     * @return: a square matrix
     */
    public int[][] generateMatrix(int n) {
        // write your code here
        // 先建一個空的
        //在一個個填進去
        int[][] matrix = new int[n][n];
        
        if (n == 0) {
            return matrix;
        }
        
        int rowStart = 0;
        int rowEnd = n-1;
        int colStart = 0;
        int colEnd = n-1;
        int num = 1; //change
        
        while (rowStart <= rowEnd && colStart <= colEnd) {
            for (int i = colStart; i <= colEnd; i ++) {
                matrix[rowStart][i] = num ++;
            }
            rowStart ++;
            
            for (int i = rowStart; i <= rowEnd; i ++) {
                matrix[i][colEnd] = num ++; 
            }
            colEnd --;
            
            for (int i = colEnd; i >= colStart; i --) {
                if (rowStart <= rowEnd)
                    matrix[rowEnd][i] = num ++;
            }
            rowEnd --;
            
            for (int i = rowEnd; i >= rowStart; i --) {
                if (colStart <= colEnd)
                    matrix[i][colStart] = num ++;
            }
            colStart ++;
        }
        
        return matrix;
    }
}

//Joel's Code
public class Solution {
    /**
     * @param n: An integer
     * @return: a square matrix
     */
    public int[][] generateMatrix(int n) {
        int[][] result = new int[n][n];
        int xStart = 0;
        int yStart = 0;
        
        int sumCount = n * n;
        int num = 1;
        int direction = 0;
        int count = 0;
        
        
        //硬写，for 循环控制整体数量
        for (int i = 0; i < sumCount; i++) {
            //四种情况开始绕
            if (direction == 0) {
                result[xStart][yStart] = num;
                //需要变向的边境情况
                if (!inBound(xStart, yStart + 1, result)) {
                    direction = (direction + 1) % 4;
                    xStart++;
                } else {
                    yStart++;
                }
            }
            else if (direction == 1) {
                result[xStart][yStart] = num;
                if (!inBound(xStart + 1, yStart, result)) {
                    direction = (direction + 1) % 4;
                    yStart--;
                } else {
                    xStart++;
                }
            }
            else if (direction == 2) {
                result[xStart][yStart] = num;
                if (!inBound(xStart, yStart - 1, result)) {
                    direction = (direction + 1) % 4;
                    xStart--;
                } else {
                    yStart--;
                }
            }
            else if (direction == 3) {
                result[xStart][yStart] = num;
                if (!inBound(xStart - 1, yStart, result)) {
                    direction = (direction + 1) % 4;
                    yStart++;
                } else {
                    xStart--;
                }
            }
            num++;
        }
        
        return result;
    }
    
    private boolean inBound(int x, int y, int[][] result) {
        if (x < 0 || y < 0 || x >= result.length || y >= result.length || result[x][y] != 0)
        {
            return false;
        }
        return true;
    }
}
